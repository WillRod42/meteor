x <- 2
temp <- 10
รง
too.expensive <- total.cost > 1000
total.cost <- 800
too.expensive <- total.cost > 1000
too.expensive
hometown <- Bothell
hometown <-
first.ten <- 10:20
test <- 10:20
test
test <- length(test)
test <- seq(1, 100, 2)
all(test %% 2)
all(test %% 2 : 1)
z <- c(1:10)
z[c(TRUE, FALSE)] <- 0
z
meals
dinner <- meals$dinner
meals
meals$dinner <- c("cuban sandwitch")
dinner <- meals$dinner
meals[[5]] <- meals[['lunch']]
meals$dinner <- c("cuban sandwitch")
better.meals <- lapply(meals, AddPizza)
AddPizza <- function(x) {
results <- c(x, 'pizza')
return(results)
}
meals
results
x
today.breakfast <- c("eggs", "toast", "milk")
today.breakfast <- c("eggs", "toast", "milk")
today.lunch <- c("water")
meals <- list(breakfast = today.breakfast, lunch = today.lunch)
meals$dinner <- c("cuban sandwitch")
dinner <- meals$dinner
dinner <- meals$dinner
meals[[5]] <- meals[['lunch']]
early.meals <- meals[1:2]
items <- lappy(meals, length)
AddPizza <- function(x) {
results <- c(x, 'pizza')
return(results)
}
better.meals <- lapply(meals, AddPizza)
meals
AddPizza(x)
install.packages("stringr")
my.age <- 19
my.name <- Justin
minutes.in.a.day <- 24 * 60
my.name <- "Justin"
my.age <- 19
my.name <- "Justin"
minutes.in.a.day <- 24 * 60
hours.in.a.year <- 24 * 365
more.minutes.than.hours <- minutes.in.a.day > hours.in.a.year
MakeIntroduction <- fuction(name, age) {
result <- "Hello, my name is " + name + ", and I'm " + age + " years old"
}
MakeIntroduction <- function(name, age) {
result <- "Hello, my name is " + name + ", and I'm " + age + " years old"
}
MakeIntroduction("Justin", 19)
MakeIntroduction("Justin", "19")
MakeIntroduction <- function(name, age) {
result <- paste("Hello, my name is ", name, " and I'm ", age," years old")
}
MakeIntroduction("Justin", "19")
MakeIntroduction <- function(name, age) {
result <- paste("Hello, my name is ", name, " and I'm ", age," years old")
return(result)
}
MakeIntroduction("Justin", "19")
MakeIntroduction("Justin", 19)
MakeIntroduction <- function(name, age) {
result <- paste("Hello, my name is", name, "and I'm", age,"years old")
return(result)
}
MakeIntroduction("Justin", 19)
my.intro <- MakeIntroduction(my.name, my.age)
casual.intro[c(2,4)] <- c(my.intro)
loud.intro <- toupper(my.intro)
quiet.intro <- tolower(my.intro)
casual.intro <- str_replace(my.intro, "Hello, my name is", "Hey, I\'m")
casual.intro <- sub("Hello, my name is", "Hey, I\'m", my.intro, ignore.case=TRUE, fixed=T)
casual.intro <- sub("Hello, my name is", "Hey, I\'m", my.intro, ignore.case=TRUE, fixed=T)
casual.intro <- sub("Hello, my name is", "Hey, I\'m", my.intro, ignore.case=FALSE, fixed=T)
capitalized <- str_to_title(my.intro)
library("stringr")
capitalized <- str_to_title(my.intro)
occurrences <- str_count(my.intro, "e")
Double <- function(x) {
result <- x * 2
return(result)
}
Double("test")
minutes.in.two.days <- Double(minutes.in.a.day)
ThirdPower <- fuction(x) {
result <- x^3
return(result)
}
ThirdPower <- function(x) {
result <- x^3
return(result)
}
twenty.seven <- ThirdPower(3)
movies <- c("Ocean's 11", "Neighbors", "Fast and Furious", "Iron Man", "Avatar", "Baywatch")
top.three <- movies[1:3]
excited <- movies + " is a great movie!"
excited <- paste(movies, " is a great movie!")
excited <- paste(movies, "is a great movie!")
excited <- paste(movies, "is a great movie!")
without.four <- movies[1, 2, 3, 5, 6]
without.four <- movies[c(1, 2, 3, 5, 6)]
numbers <- 700:999
len <- numbers.length
len <- length(numbers)
numbers.mean <- mean(numbers)
numbers.median <- median(numbers)
lower.numbers <- 500:699
all.numbers <- c(lower.numbers, numbers)
today <- as.Date()
today <- as.Date(Thursday)
today <- as.Date(Sys.Date(), "Thursday")
winter.break <- as.Date(2017-12-15)
winter.break <- as.Date(2017-12-15, origin)
winter.break <- as.Date("2017-12-15", origin)
winter.break <- as.Date("first day", origin = "2017-12-15")
winter.break <- as.Date("first day", origin = 2017-12-15)
winter.break <- as.Date(origin = "2017-12-15")
winter.break <- as.Date(x, origin = "2017-12-15")
today <- as.Date(Sys.Date(), "%m/%d/%y")
winter.break <- as.Date(x, origin = "2017-12-15")
today <- as.Date(Sys.Date(), "%m/%d/%y")
today <- as.Date(Sys.Date())
winter.break <- as.Date(2017-12-15)
winter.break <- as.Date(origin = 2017-12-15)
winter.break <- as.Date(origin = 2017-12-15)
winter.break <- as.Date(origin = "2017-12-15")
winter.break <- as.Date(1, origin = "2017-12-15")
winter.break <- as.Date(0, origin = "2017-12-15")
days.to.break <- winter.break - today
today <- as.Date(Sys.Date())
days.to.break <- today - winter.break
days.to.break <- winter.break - today
days.to.break <- as.Date(winter.break) - as.Date(today)
days.to.break <- as.Date(winter.break) - as.Date(today)
days.to.break <- as.Date(winter.break - today)
days.to.break <- as.Date(as.Date(winter.break) - as.Date(today))
days.to.break <- winter.break - today
winter.break <- as.Date("2017-12-15", format = "%y-%m-%d")
days.to.break <- winter.break - today
winter.break <- as.Date("2017-12-15", format = "%Y-%m-%d")
days.to.break <- winter.break - today
days.to.break <- as.Date("winter.break - today", format = "%Y-%m-%d")
days.to.break <- as.Date("winter.break - today", format = "%Y-%m-%d")
days.to.break <- as.Date(winter.break - today, format = "%Y-%m-%d")
return(result)
RemoveDigits <- function(str.vector) {
result <- str_extract(str.vector, 0:9)
return(result)
}
RemoveDigits(justin15park)
winter.break <- as.Date("2017-12-15")
winter.break <- as.Date(2017-12-15)
winter.break <- as.Date("2017-12-15")
days.to.break <- winter.break - today
days.to.break <- winter.break - today
days.to.break <- as.Date(winter.break) - as.Date(today)
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date(Sys.Date()) - as.Date(birthday)
new.age <- age + 1
result <- paste(MakeIntroduction(name, age) + ".", "In", n.days, "days I'll be", new.age)
}
RemoveDigits <- function(str.vector) {
result <- str_extract(str.vector, 0:9)
return(result)
}
winter.break <- as.Date("2017-12-15")
RemoveDigits(c("INFO 201", "CSE 142"))
RemoveDigits <- function(str.vector) {
result <- gsub("[0-9]"), "", str.vector)
return(result)
}
RemoveDigits <- function(str.vector) {
result <- gsub("[0-9]", "", str.vector)
return(result)
}
RemoveDigits(c("INFO 201", "CSE 142"))
RemoveDigits(c("INFO 201", "CSE 142"))
RemoveDigits <- function(strings) {
result <- gsub("[0:9]", "", strings)
return(result)
}
RemoveDigits(c("INFO 201", "CSE 142"))
RemoveDigits <- function(strings) {
result <- gsub("[0-9]", "", strings)
return(result)
}
days.to.break <- as.integer(days(winter.break) - days(today))
dates <- as.Date(c(today, winter.break))
days.to.break <- dates[2] - dates[1]
dates <- as.Date(c(as.Date(today), as.Date(winter.break)))
days.to.break <- dates[2] - dates[1]
test <- c(today, winter.break)
days.to.break <- test[2] - test[1]
RemoveDigits <- function(strings) {
result <- sub("[0-9]", "", strings)
return(result)
}
RemoveDigits(c("INFO 201", "CSE 142"))
RemoveDigits <- function(strings) {
result <- gsub("[0-9]", "", strings)
return(result)
}
days.to.break <- strptime(winter.break) - strptime(today)
days.to.break <- strptime(winter.break, "%Y/%m/%d") - strptime(today, "%Y/%m/%d")
days.to.break <- as.Date(strptime(winter.break, "%Y/%m/%d")) - as.Date(strptime(today, "%Y/%m/%d"))
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date(Sys.Date()) - as.Date(birthday)
new.age <- age + 1
result <- paste(MakeIntroduction(name, age) + ".", "In", n.days, "days I'll be", new.age)
}
days.to.break <- as.Date(strptime(winter.break, "%Y-%m-%d")) - as.Date(strptime(today, "%Y-%m-%d"))
days.to.break <- strptime(winter.break, "%Y-%m-%d") - strptime(today, "%Y-%m-%d")
days.to.break <- as.Date(strptime(winter.break, "%Y-%m-%d") - strptime(today, "%Y-%m-%d"))
first.day <- strptime(today, "%Y-%m-%d")
last.day <- strptime(winter.break, "%Y-%m-%d")
days.to.break <- last.day - first.day
days.to.break <- as.Date(last.day - first.day)
days.to.break <- as.Date(last.day) - as.Date(first.day)
days.to.break
days.to.break <- as.Date(strptime(winter.break, "%Y-%m-%d") - strptime(today, "%Y-%m-%d"))
days.to.break <- as.Date(strptime(winter.break, "%Y-%m-%d")) - as.Date(strptime(today, "%Y-%m-%d")))
days.to.break <- as.Date(strptime(winter.break, "%Y-%m-%d")) - as.Date(strptime(today, "%Y-%m-%d"))
days.to.break
days.to.break <- as.Date(winter.break, "%Y-%m-%d") - as.Date(today, "%Y-%m-%d")
days.to.break
days.to.break <- as.Date(winter.break) - as.Date(today)
days.to.break
test <- winter.break - today
test
days.to.break <- winter.break - today
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date(birthday) - as.Date(Sys.Date())
new.age <- age + 1
result <- paste(MakeIntroduction(name, age) + ".", "In", n.days, "days I'll be", new.age)
}
MakeBirthdayIntro(Justin, 19, 2017-10-13)
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date(birthday, "%Y-%m-%d") - as.Date(Sys.Date())
new.age <- age + 1
result <- paste(MakeIntroduction(name, age) + ".", "In", n.days, "days I'll be", new.age)
}
MakeBirthdayIntro(Justin, 19, 2017-10-13)
> MakeBirthdayIntro("Justin", 19, 2017-10-13)
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date(birthday, "%Y-%m-%d") - as.Date(Sys.Date())
new.age <- age + 1
result <- paste(MakeIntroduction(name, age), "In", n.days, "days I'll be", new.age)
return(result)
}
MakeBirthdayIntro("Justin", 19, 2017-10-13)
MakeBirthdayIntro("Justin", 19, 2017-10-13)
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date(birthday) - as.Date(Sys.Date())
new.age <- age + 1
result <- paste(MakeIntroduction(name, age), "In", n.days, "days I'll be", new.age)
return(result)
}
MakeBirthdayIntro("Justin", 19, 2017-10-13)
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date(birthday, "%Y-%m-%d") - as.Date(Sys.Date())
new.age <- age + 1
result <- paste(MakeIntroduction(name, age), "In", n.days, "days I'll be", new.age)
return(result)
}
MakeBirthdayIntro("Justin", 19, 2017-10-13)
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date("%Y-%m-%d", birthday) - as.Date(Sys.Date())
new.age <- age + 1
result <- paste(MakeIntroduction(name, age), "In", n.days, "days I'll be", new.age)
return(result)
}
MakeBirthdayIntro("Justin", 19, 2017-10-13)
RemoveDigits(c("INFO 201", "CSE 142"))
MakeBirthdayIntro("Justin", 19, "2017-10-13")
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date(birthday, "%Y-%m-%d") - as.Date(Sys.Date())
new.age <- age + 1
result <- paste(MakeIntroduction(name, age) + ".", "In", n.days, "days I'll be", new.age)
return(result)
}
MakeBirthdayIntro("Justin", 19, "2017-10-13")
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date(birthday, "%Y-%m-%d") - as.Date(Sys.Date())
new.age <- age + 1
result <- paste(MakeIntroduction(name, age), ".", "In", n.days, "days I'll be", new.age)
return(result)
}
MakeBirthdayIntro("Justin", 19, "2017-10-13")
MakeBirthdayIntro <- function(name, age, birthday) {
n.days <- as.Date(birthday, "%Y-%m-%d") - as.Date(Sys.Date())
new.age <- age + 1
result <- paste(MakeIntroduction(name, age), "In", n.days, "days I'll be", new.age)
return(result)
}
MakeBirthdayIntro("Justin", 19, "2017-10-14")
MakeIntroduction <- function(name, age) {
result <- paste("Hello, my name is", name, "and I'm", age,"years old.")
return(result)
}
MakeBirthdayIntro("Justin", 19, "2017-10-14")
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2018-08-29")
casual.intro <- sub("Hello, my name is", "Hey, I'm", my.intro, ignore.case=FALSE, fixed=T)
casual.intro <- sub("Hello, my name is", "Hey, I\'m", my.intro)
MakeIntroduction <- function(name, age) {
result <- paste("Hello, my name is", name, "and I\'m", age,"years old.")
return(result)
}
my.intro <- MakeIntroduction(my.name, my.age)
casual.intro <- sub("Hello, my name is", "Hey, I\'m", my.intro)
movies <- c("Ocean\'s 11", "Neighbors", "Fast and Furious", "Iron Man", "Avatar", "Baywatch")
data <- read.csv("./data/meteor.csv")
setwd("~/Documents/UW/INFO201/homework/meteor")
library(readr)
dataset <- read_csv(NULL)
View(dataset)
meteorite.data <- read.csv("./data/meteorite-landings.csv", stringsAsFactors = FALSE)
View(meteorite.data)
shiny::runApp()
library(shiny)
library(plotly)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(dplyr)
library(tidyr)
runApp()
runApp()
runApp()
Sys.setlocale(locale="C")
runApp()
dataset <- read.csv("./data/meteorite-landings.csv")
meteorite.data <- dataset %>%
filter(year>=860 & year<=2016) %>% # filter out weird years
filter(reclong<=180 & reclong>=-180 & (reclat!=0 | reclong!=0)) # filter out weird locations
filter.by.year <- meteorite.data %>%
filter(year > as.numeric(input$years[[1]]) & year < as.numeric(input$years[[2]]))
test.data <- meteorite.data %>%
filter(year >= 2000 & year <= 2016)
runApp()
date1 <- as.date(2010, "%y")
date1 <- as.Date(2010, "%y")
date1 <- as.Date("2010", "%y")
date2 <- as.Date("2016", "%y")
date1 <- as.Date("2010", "%y")
date2 <- as.Date("2016", "%y")
date1 <- as.Date("2010", "%yyyy")
date2 <- as.Date("2016", "%yyyy")
date1
date1 <- as.Date("2010", "%Y")
date2 <- as.Date("2016", "%Y")
runApp()
filter.by.year <- test.data %>%
filter(year >= as.numeric(input$years[[1]]) & year <= as.numeric(input$years[[2]]))
filter.by.year <- test.data %>%
filter(year >= as.numeric(date1) & year <= as.numeric(date2))
as.numeric(date1)
filter.by.year <- meteorite.data %>%
filter(year > as.numeric(input$range[[1]]) & year < as.numeric(input$range[[2]]))
runApp()
runApp()
runApp()
runApp()
unique.data <-  unique(meteor.data[, c("reclat", "reclong")])
unique.data <-  unique(meteorite.data[, c("reclat", "reclong")])
View(unique.data)
unique.data2 <- distinct(meteorite.data, "reclat", "reclong")
View(unique.data2)
unique.data2 <- distinct(meteorite.data, meteorite.data$reclat, meteorite.data$reclong)
View(unique.data2)
unique.data2 <- meteorite.data %>%
distinct(reclat, reclong)
unique.data2 <- meteorite.data %>%
distinct(reclat, reclong)
View(unique.data2)
unique.data2 <- distinct(meteorite.data, reclat, reclong)
meteorite.data <- dataset %>%
filter(year>=860 & year<=2016) %>% # filter out weird years
filter(reclong<=180 & reclong>=-180 & (reclat!=0 | reclong!=0)) # filter out weird locations
unique.data2 <- distinct(meteorite.data, reclat, reclong)
unique.data <- distinct(meteorite.data, reclat, reclong)
unique.data <- meteorite.data %>% select(reclat, reclong) %>% distinct()
unique.data <- meteorite.data %>% select(reclat, reclong) %>% distinct()
unique.data <- meteorite.data %>% select(reclat, reclong) %>% distinct
unique.data <- meteorite.data %>% select(reclat, reclong) %>% distinct(reclat, reclong)
unique.data <- distinct(meteorite.data, reclat, reclong)
unique.data <- distinct(meteorite.data, "reclat", "reclong")
unique.data <- meteorite.data %>%
select(reclat, reclong) %>%
distinct(reclat, reclong)
unique.data <- distinct(GeoLocation, reclat, reclong)
unique.data <- distinct(meteorite.data, GeoLocation)
View(unique.data)
unique.locations <- distinct(meteorite.data, GeoLocation)
unique.data <- meteorite.data %>%
filter(GeoLocation = unique.locations$GeoLocation)
unique.locations <- distinct(meteorite.data, GeoLocation)
View(unique.locations)
unique.locations <- distinct(meteorite.data, GeoLocation)
unique.data <- meteorite.data %>%
filter(GeoLocation == unique.locations$GeoLocation)
unique.locations <- distinct(meteorite.data, GeoLocation)
unique.data <- meteorite.data %>%
filter(GeoLocation == unique.locations$GeoLocation)
View(unique.data)
meteorite.data <- dataset %>%
filter(year>=860 & year<=2016) %>% # filter out weird years
filter(reclong<=180 & reclong>=-180 & (reclat!=0 | reclong!=0)) # filter out weird locations
unique.locations <- distinct(meteorite.data, GeoLocation)
unique.data <- meteorite.data %>%
filter(GeoLocation == unique.locations$GeoLocation)
list <- unique.locations$GeoLocation
test <- meteorite.data[!duplicated(df$GeoLocation),]
test <- meteorite.data[!duplicated(meteorite.data$GeoLocation), ]
dataset <- read.csv("./data/meteorite-landings.csv")
meteorite.data <- dataset %>%
filter(year>=860 & year<=2016) %>% # filter out weird years
filter(reclong<=180 & reclong>=-180 & (reclat!=0 | reclong!=0)) # filter out weird locations
unique.data <- meteorite.data[!duplicated(meteorite.data$GeoLocation), ]
View(unique.data)
runApp()
runApp()
runApp()
return(plot_geo(filter.by.year) %>%
layout(title = "Where Meteorite's Land", geo = g) %>%
add_markers(x = ~reclong, y = ~reclat, hoverinfo = "text",
text = ~paste("Date: ", year, "</br></br>", "Name of Meteorite: ",
name, "</br>Size: ", mass),
marker = list(color = "rgb(126, 41, 162)"),
size23 = 3
))
return(plot_geo(unique.data) %>%
layout(title = "Where Meteorite's Land", geo = g) %>%
add_markers(x = ~reclong, y = ~reclat, hoverinfo = "text",
text = ~paste("Date: ", year, "</br></br>", "Name of Meteorite: ",
name, "</br>Size: ", mass),
marker = list(color = "rgb(126, 41, 162)"),
size23 = 3
))
g <- list(
scope = "world",
showland = TRUE,
landcolor = toRGB("grey83"),
subunitcolor = toRGB("black"),
countrycolor = "rgb(124, 106, 132)",
showlakes = TRUE,
lakecolor = toRGB("white"),
showsubunits = TRUE,
showcountries = TRUE,
resolution = 50,
projection = list(type = "mercator")
)
return(plot_geo(unique.data) %>%
layout(title = "Where Meteorite's Land", geo = g) %>%
add_markers(x = ~reclong, y = ~reclat, hoverinfo = "text",
text = ~paste("Date: ", year, "</br></br>", "Name of Meteorite: ",
name, "</br>Size: ", mass),
marker = list(color = "rgb(126, 41, 162)"),
size23 = 3
))
plot_geo(unique.data) %>%
layout(title = "Where Meteorite's Land", geo = g) %>%
add_markers(x = ~reclong, y = ~reclat, hoverinfo = "text",
text = ~paste("Date: ", year, "</br></br>", "Name of Meteorite: ",
name, "</br>Size: ", mass),
marker = list(color = "rgb(126, 41, 162)"),
size23 = 3
)
plot_geo(unique.data) %>%
layout(title = "Where Meteorite's Land", geo = g) %>%
add_markers(x = ~reclong, y = ~reclat, hoverinfo = "text",
text = ~paste("Date: ", year, "</br></br>", "Name of Meteorite: ",
name, "</br>Size: ", mass),
marker = list(color = "rgb(126, 41, 162)", size = 3)
plot_geo
plot_geo
runApp()
runApp()
runApp()
runApp()
runApp()
View(dataset)
runApp()
